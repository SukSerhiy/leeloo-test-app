{"version":3,"sources":["reducers/cellValuesReducer.js","reducers/rootReducer.js","reducers/simpleReducer.js","reducers/focusedCellReducer.js","reducers/formulaEnteringCellReducer.js","store.js","actions/focusedCell/setFocus.js","actions/focusedCell/removeFocus.js","actions/cellValues/setCellValue.js","actions/cellValues/setFormula.js","actions/cellValues/setFormulaArguments.js","actions/formulaEnteringCell/setFormulaEnteringCell.js","actions/formulaEnteringCell/unsetFormulaEnteringCell.js","enums/formulaTypes.js","enums/dataTypes.js","utils/tableUtils.js","operations/index.js","Table/Cell/Cell.jsx","Alerts/ErrorAlert.js","Table/Cell/index.js","Table/RowSells/index.js","Table/RowSells/RowSells.jsx","Table/TableRows/index.js","Table/TableRows/TableRows.jsx","Table/index.js","Table/Table.jsx","CellState/CellState.jsx","CellState/index.js","SAlert.jsx","App.js","index.js"],"names":["getCellByIndex","state","xCoord","yCoord","findIndex","item","get","combineReducers","simpleReducer","arguments","length","undefined","action","type","result","payload","focusedCell","cellValues","_action$payload","value","dataType","cellIndex","update","set","push","Map","_action$payload2","List","_action$payload3","args","setIn","formulaEnteringCell","initState","Immutable","fromJS","setFocus","dispatch","removeFocus","addCell","setFormula","setFormulaArguments","setFormulaEntering","unsetFormulaEntering","formulaTypes","SUM","AVERAGE","CONCAT","HYPERLINK","dataTypes","key","getCellByCoords","cellArr","find","cell","sum","_len","Array","_key","reduce","acc","curr","avarage","_len2","_key2","concat","_len3","_key3","hyperlink","arg","formulaPattern","determineDataType","checkDataTypes","formulaType","map","every","dt","getOperationResultDataType","executeFormula","operations","apply","Object","toConsumableArray","handleError","message","console","error","Alert","position","effect","timeout","ErrorAlert","Cell","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","formulaArgs","focused","handleCellFocus","_this$props$formulaEn","_this$props2","argXCoord","argYCoord","currentArguments","formula","_this$props","setState","inputRef","current","focus","handleCellBlur","handleInputChange","event","target","_this$props3","setCellValue","setFormulaEnteringCell","unsetFormulaEnteringCell","test","typeMatch","match","coordStr","prev","handleKeyPress","e","_this$props4","charCode","_currentCell$formula","formulaArgCoord","filter","argsValues","React","createRef","prevProps","_this$props5","_this$props5$formulaE","currentCell","prevCurrentCell","prevFormulaArgs","argCoords","join","_this$state","react_default","a","createElement","className","onClick","onKeyPress","ref","onBlur","onChange","style","height","Component","connect","_state$toJS","toJS","RowCells","count","coord","cells","fill","react","c","Table_Cell","code","String","fromCharCode","TableRows","verticalCellCount","horizontalCellCount","rows","r","Table_RowSells","Table","Table_TableRows","CellState","dataTypesEnum","inputValue","cellDataType","onSelectChange","_this$props$focusedCe","onInputChange","newState","_cell$formula","coordsStr","formulaStr","objectSpread","keys","_ref","_this$state2","es5","disabled","placeholder","idx","Option","label","SAlert","react_s_alert_default","src_CellState","src_Table","src_SAlert","ReactDOM","render","es","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","configureStore","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.ce977195.chunk.js","sourcesContent":["import { Map, List } from 'immutable';\r\n\r\n/**\r\n * Gets cell from array of cells by coords\r\n * @param {Immutable.Map} state \r\n * @param {strign} xCoord \r\n * @param {number} yCoord \r\n * @return {Immutable.Map} \r\n */\r\nconst getCellByIndex = (state, xCoord, yCoord) => (\r\n  state.findIndex(item => \r\n    item.get('xCoord') === xCoord && \r\n    item.get('yCoord') === yCoord\r\n  )\r\n);\r\n\r\nexport default (state = [], action) => {\r\n  switch (action.type) {\r\n    case 'SET_CELL_VALUE': {\r\n      const { xCoord, yCoord, value, dataType } = action.payload;\r\n      const cellIndex = getCellByIndex(state, xCoord, yCoord);\r\n      if (cellIndex !== -1) {\r\n        return state.update(\r\n          cellIndex, \r\n          () => (\r\n            state\r\n            .get(cellIndex)\r\n            .set('value', value)\r\n            .set('dataType', dataType)\r\n          )\r\n        )\r\n      } else {\r\n        return state.push(Map(action.payload));\r\n      }\r\n    }\r\n    case 'SET_FORMULA': {\r\n      const { xCoord, yCoord, type } = action.payload;\r\n      const cellIndex = getCellByIndex(state, xCoord, yCoord);\r\n      return state.update(\r\n        cellIndex,\r\n        () => (\r\n          state.get(cellIndex)\r\n            .set('formula', Map({\r\n                type,\r\n                arguments: List([])\r\n              })\r\n            )\r\n        )\r\n      )\r\n    }\r\n    case 'SET_FORMULA_ARGUMENTS': {\r\n      const { xCoord, yCoord, arguments: args } = action.payload;\r\n      const cellIndex = getCellByIndex(state, xCoord, yCoord);\r\n      return state.update(\r\n        cellIndex,\r\n        () => \r\n        state\r\n          .get(cellIndex)\r\n          .setIn(\r\n            ['formula', 'arguments'], \r\n            args\r\n          )\r\n      );\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux-immutable';\r\nimport simpleReducer from './simpleReducer';\r\nimport focusedCellReducer from './focusedCellReducer';\r\nimport cellValuesReducer from './cellValuesReducer';\r\nimport formulaEnteringCellReducer from './formulaEnteringCellReducer';\r\n\r\nexport default combineReducers({\r\n  simpleReducer,\r\n  focusedCell: focusedCellReducer,\r\n  cellValues: cellValuesReducer,\r\n  formulaEnteringCell: formulaEnteringCellReducer\r\n});","export default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case 'SIMPLE_ACTION':\r\n      return {\r\n        result: action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","export default (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_FOCUS':\r\n      return action.payload;\r\n    case 'REMOVE_FOCUS':\r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { Map } from 'immutable';\r\n\r\nexport default (state = null, action) => {\r\n  switch (action.type) {\r\n    case 'SET_FORMULA_ENTERING_CELL':\r\n      const { xCoord, yCoord } = action.payload; \r\n      return Map({ xCoord, yCoord });\r\n    case 'UNSET_FORMULA_ENTERING_CELL': \r\n      return null;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport Immutable from 'immutable';\r\n\r\nconst initState = Immutable.fromJS({\r\n  focusedCell: null,\r\n  cellValues: [],\r\n  formulaEnteringCell: null\r\n});\r\n\r\nexport default function configureStore(initialState = initState) {\r\n    return createStore(\r\n      rootReducer,\r\n      initialState,\r\n      composeWithDevTools(\r\n        applyMiddleware(thunk)\r\n      )\r\n    );\r\n}","const setFocus = payload => dispatch => {\r\n  dispatch({\r\n    type: 'SET_FOCUS',\r\n    payload: payload\r\n  });\r\n}\r\n\r\nexport default setFocus;","const removeFocus = () => dispatch => {\r\n  dispatch({\r\n    type: 'REMOVE_FOCUS'\r\n  });\r\n}\r\n\r\nexport default removeFocus;","const addCell = payload => dispatch => {\r\n  dispatch({\r\n    type: 'SET_CELL_VALUE',\r\n    payload\r\n  });\r\n}\r\n\r\nexport default addCell;","const setFormula = payload => dispatch => {\r\n  dispatch({\r\n    type: 'SET_FORMULA',\r\n    payload\r\n  });\r\n}\r\n\r\nexport default setFormula;","const setFormulaArguments = payload => dispatch => {\r\n  dispatch({\r\n    type: 'SET_FORMULA_ARGUMENTS',\r\n    payload\r\n  });\r\n}\r\n\r\nexport default setFormulaArguments;","const setFormulaEntering = payload => dispatch => {\r\n  dispatch({\r\n    type: 'SET_FORMULA_ENTERING_CELL',\r\n    payload\r\n  });\r\n}\r\n\r\nexport default setFormulaEntering;","const unsetFormulaEntering = () => dispatch => {\r\n  dispatch({\r\n    type: 'UNSET_FORMULA_ENTERING_CELL',\r\n  });\r\n}\r\n\r\nexport default unsetFormulaEntering;","const formulaTypes = {\r\n  SUM: 'SUM',\r\n  AVERAGE: 'AVERAGE',\r\n  CONCAT: 'CONCAT',\r\n  HYPERLINK: 'HYPERLINK'\r\n};\r\n\r\nexport default formulaTypes;","const dataTypes = [\r\n  {\r\n    key: 'NUMBER',\r\n    value: 'Number'\r\n  },\r\n  {\r\n    key: 'STRING',\r\n    value: 'String'\r\n  },\r\n  {\r\n    key: 'MONEY_SUMM',\r\n    value: 'Money summ'\r\n  },\r\n  {\r\n    key: 'HYPERLINK',\r\n    value: 'Hyperlink'\r\n  }\r\n];\r\n\r\nexport default dataTypes;","/**\r\n * Gets cell from an array of cells by coords\r\n * @param {array} cellArr \r\n * @param {string} xCoord \r\n * @param {number} yCoord \r\n * @return {object}\r\n */\r\nexport const getCellByCoords = (cellArr, xCoord, yCoord) => (\r\n  cellArr.find(cell => cell.xCoord === xCoord && cell.yCoord === yCoord)\r\n);","export const sum = (...args) => args.reduce((acc, curr) => +acc + +curr);\r\n\r\nexport const avarage = (...args) => args.reduce((acc, curr) => +acc + +curr) / args.length;\r\n\r\nexport const concat = (...args) => args.reduce((acc, curr) => (acc + curr), '');\r\n\r\nexport const hyperlink = (arg) => arg;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setFocus, removeFocus } from '../../actions/focusedCell';\r\nimport { \r\n  setCellValue,\r\n  setFormula,\r\n  setFormulaArguments\r\n} from '../../actions/cellValues';\r\nimport {\r\n  setFormulaEnteringCell,\r\n  unsetFormulaEnteringCell\r\n} from '../../actions/formulaEnteringCell';\r\nimport { formulaTypes } from '../../enums';\r\nimport { ErrorAlert } from '../../Alerts';\r\nimport { getCellByCoords } from '../../utils/tableUtils';\r\nimport * as operations from '../../operations';\r\n\r\nconst formulaPattern = /^=(SUM|AVARAGE|CONCAT|HYPERLINK)\\(([A-Z]+\\d+,\\s?)*[A-Z]+\\d+\\)$/;\r\n\r\n/**\r\n * Determines probable data type for input data\r\n * @param {string} value \r\n */\r\nconst determineDataType = value => {\r\n  if (+value) {\r\n    return 'NUMBER';\r\n  } else {\r\n    return 'STRING';\r\n  }\r\n}\r\n\r\n/**\r\n * Return true when all arguments has allowed data types for the operation,\r\n *  otherwise returns false\r\n * @param {array} args\r\n * @param {strign} formulaType\r\n * @return {boolean}\r\n */\r\nconst checkDataTypes = (args, formulaType) => {\r\n  const dataTypes = args.map(arg => arg.dataType);\r\n  switch(formulaType) {\r\n    case formulaTypes.SUM:\r\n    case formulaTypes.AVERAGE:\r\n      if (dataTypes.every(dt => dt === 'NUMBER') || \r\n        dataTypes.every(dt => dt === 'MONEY_SUM')\r\n      ) {\r\n        return true;\r\n      }\r\n      break;\r\n    case formulaTypes.CONCAT:\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets data type of the result of the operation\r\n * @param {array} args \r\n * @param {string} formulaType \r\n */\r\nconst getOperationResultDataType = (args, formulaType) => {\r\n  const dataTypes = args.map(arg => arg.dataType);\r\n  switch(formulaType) {\r\n    case formulaTypes.SUM:\r\n    case formulaTypes.AVERAGE:\r\n      if (dataTypes.every(dt => dt === 'NUMBER')) {\r\n        return 'NUMBER';\r\n      }\r\n      if (dataTypes.every(dt => dt === 'MONEY_SUM')) {\r\n        return 'MONEY_SUM';\r\n      }\r\n      break;\r\n    case formulaTypes.CONCAT:\r\n      return 'STRING';\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Returns result of executing the operation with the array of arguments\r\n * @param {string} formulaType \r\n * @param {array} args \r\n */\r\nconst executeFormula = (formulaType, args) => {\r\n  switch(formulaType) {\r\n    case formulaTypes.SUM:\r\n      return operations.sum(...args);\r\n    case formulaTypes.AVERAGE:\r\n      return operations.avarage(...args);\r\n    case formulaTypes.CONCAT:\r\n      return operations.concat(...args);\r\n    case formulaTypes.HYPERLINK:\r\n      return operations.hyperlink(...args);\r\n    default: \r\n      return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Handle error\r\n * @param {string} message \r\n */\r\nconst handleError = (message) => {\r\n  console.error(message);\r\n  ErrorAlert(message);\r\n}\r\n\r\nclass Cell extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.inputRef = React.createRef();\r\n  }\r\n\r\n  state = {\r\n    value: null,\r\n    dataType: null,\r\n    formulaArgs: null,\r\n    focused: false\r\n  };\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.state.focused) {\r\n      if (prevProps.formulaEnteringCell && this.props.formulaEnteringCell) {\r\n        const { formulaEnteringCell: {\r\n          xCoord,\r\n          yCoord\r\n        }, cellValues } = this.props;\r\n  \r\n        const currentCell = getCellByCoords(cellValues, xCoord, yCoord);\r\n        const prevCurrentCell = getCellByCoords(prevProps.cellValues, xCoord, yCoord);\r\n  \r\n        const { formula, formula: { arguments: formulaArgs } } = currentCell;\r\n        const { formula: { arguments: prevFormulaArgs } } = prevCurrentCell;\r\n  \r\n        const formulaType = formula.type;\r\n  \r\n        if (prevFormulaArgs.length !== formulaArgs.length) {\r\n          const argCoords = formulaArgs.map(arg => `${arg.xCoord}${arg.yCoord}`);\r\n          this.setState({ value: `=${formulaType}(${argCoords.join(', ')})` });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCellFocus = () => {\r\n    if (!this.props.formulaEnteringCell) {\r\n      const { yCoord, xCoord, setFocus } = this.props;\r\n      setFocus({ yCoord, xCoord });\r\n      this.setState({ focused: true }, () => {\r\n        this.inputRef.current.focus();\r\n      });\r\n    } else {\r\n      const { xCoord, yCoord } = this.props.formulaEnteringCell;\r\n      const { \r\n        xCoord: argXCoord, \r\n        yCoord: argYCoord, \r\n        setFormulaArguments\r\n      } = this.props;\r\n      \r\n      const { cellValues } = this.props;\r\n      const currentFormulaCell = getCellByCoords(cellValues, xCoord, yCoord);\r\n      const { formula: { arguments: currentArguments } } = currentFormulaCell;\r\n      if (xCoord !== argXCoord || yCoord !== argYCoord) {\r\n        const newerArgs = currentArguments.concat({\r\n          xCoord: argXCoord,\r\n          yCoord: argYCoord\r\n        });\r\n        setFormulaArguments({\r\n          yCoord, \r\n          xCoord,\r\n          arguments: newerArgs\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  handleCellBlur = () => {\r\n    if (!this.props.formulaEnteringCell) {\r\n      this.setState({ focused: false });\r\n    } else if (this.state.focused) {\r\n      this.inputRef.current.focus();\r\n    }\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const { value } = event.target;\r\n    let { dataType } = this.state;\r\n    const { xCoord, \r\n      yCoord, \r\n      setCellValue, \r\n      setFocus,\r\n      setFormulaEnteringCell,\r\n      unsetFormulaEnteringCell,\r\n      setFormula, \r\n      setFormulaArguments \r\n    } = this.props;\r\n\r\n    if (!dataType) {\r\n      dataType = determineDataType(value);\r\n    }\r\n\r\n    setFocus({ yCoord, xCoord });\r\n    setCellValue({ xCoord, yCoord, dataType, value });\r\n\r\n    this.setState({ value, dataType });\r\n\r\n    if (/^=SUM/.test(value) || \r\n      /^=AVARAGE/.test(value) || \r\n      /^=CONCAT/.test(value)\r\n    ) {\r\n      const typeMatch = value.match(/SUM|AVARAGE|CONCAT/);\r\n      const type = typeMatch && typeMatch[0];\r\n\r\n      if (!this.props.formulaEnteringCell) {\r\n        setFormulaEnteringCell({ xCoord, yCoord, type });\r\n        setFormula({ \r\n          xCoord, \r\n          yCoord, \r\n          type\r\n        });\r\n      }\r\n\r\n      if (formulaPattern.test(value)) {\r\n        const formulaCoordsArray = value.match(/[A-Z]\\d/g);\r\n        const formulaArgs = formulaCoordsArray.map(coordStr => {\r\n          const xCoord = coordStr\r\n            .match(/[A-Z]/g)\r\n            .reduce((prev, curr) => prev + curr);\r\n\r\n          const yCoord = +coordStr\r\n            .match(/\\d/g)\r\n            .reduce((prev, curr) => prev + curr);\r\n\r\n          return { xCoord, yCoord };\r\n        });\r\n        setFormulaArguments({\r\n          yCoord, \r\n          xCoord,\r\n          arguments: formulaArgs\r\n        });\r\n      }\r\n    } else {\r\n      if (this.props.formulaEnteringCell) {\r\n        unsetFormulaEnteringCell();\r\n      }\r\n      setCellValue({ xCoord, yCoord, dataType, value });\r\n    }\r\n  }\r\n\r\n  handleKeyPress = (e) => {\r\n    const { \r\n      formulaEnteringCell, \r\n      cellValues, \r\n      xCoord, \r\n      yCoord, \r\n      setCellValue, \r\n      unsetFormulaEnteringCell, \r\n      removeFocus \r\n    } = this.props;\r\n    const { value } = this.state;\r\n    if (e.charCode === 13 && formulaEnteringCell) {\r\n      if (formulaPattern.test(value)) {\r\n        const currentCell = getCellByCoords(cellValues, xCoord, yCoord);\r\n        const { formula: { arguments: formulaArgCoord, type } } = currentCell;\r\n        const formulaArgs = formulaArgCoord.map(arg => \r\n          getCellByCoords(cellValues, arg.xCoord, arg.yCoord)\r\n        ).filter(cell => cell);\r\n        const areDataTypesValid = checkDataTypes(formulaArgs, type);\r\n        if (areDataTypesValid) {\r\n          const argsValues = formulaArgs.map(arg => arg.value);\r\n          const dataType =  getOperationResultDataType(formulaArgs, type);\r\n          const value = executeFormula(type, argsValues);\r\n          setCellValue({ xCoord, yCoord, dataType, value });\r\n          this.setState({ value });\r\n        } else {\r\n          handleError('Incorrect data types of arguments');\r\n        }\r\n      } else {\r\n        handleError('Incorrect syntax for being a formula');\r\n      }\r\n      unsetFormulaEnteringCell();\r\n      removeFocus();\r\n      this.setState({ focused: false });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { value, focused } = this.state;\r\n    return (\r\n      <td\r\n        className={focused ? 'focused' : ''}\r\n        onClick={this.handleCellFocus}\r\n        onKeyPress={this.handleKeyPress}\r\n      >\r\n        {focused ? \r\n          <input \r\n            ref={this.inputRef}\r\n            type='text'\r\n            value={value || ''} \r\n            onBlur={this.handleCellBlur} \r\n            onChange={this.handleInputChange} \r\n          /> : \r\n          <div style={{height: '100%'}}>{value}</div>\r\n        }\r\n      </td>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { focusedCell, cellValues, formulaEnteringCell } = state.toJS();\r\n  return { focusedCell, cellValues, formulaEnteringCell };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setFocus: payload => dispatch(setFocus(payload)),\r\n  removeFocus: payload => dispatch(removeFocus(removeFocus)),\r\n  setCellValue: payload => dispatch(setCellValue(payload)),\r\n  setFormula: payload => dispatch(setFormula(payload)),\r\n  setFormulaArguments: payload => dispatch(setFormulaArguments(payload)),\r\n  setFormulaEnteringCell: payload => dispatch(setFormulaEnteringCell(payload)),\r\n  unsetFormulaEnteringCell: payload => dispatch(unsetFormulaEnteringCell())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);","import Alert from 'react-s-alert';\r\n\r\nexport default (message) => (\r\n  Alert.error(message, {\r\n    position: 'bottom-right',\r\n    effect: 'slide',\r\n    timeout: 'none'\r\n  })\r\n)","import Cell from './Cell';\r\n\r\nexport default Cell;","import RowCells from './RowSells';\r\n\r\nexport default RowCells;","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from '../Cell';\r\n\r\nconst getXCoord = code => {\r\n  return String.fromCharCode(65 + code);\r\n}\r\n\r\nconst RowCells = props => {\r\n  const { count, coord } = props;\r\n  const cells = new Array(count).fill(null, 0, count - 1);\r\n  return (\r\n    <Fragment>\r\n      {cells.map((c, key) => (<Cell \r\n        key={key} \r\n        yCoord={coord} \r\n        xCoord={getXCoord(key)} \r\n      />))}\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nRowCells.propTypes = {\r\n  count: PropTypes.number.isRequired\r\n};\r\n\r\nexport default RowCells;","import TableRows from './TableRows';\r\n\r\nexport default TableRows;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RowSells from '../RowSells';\r\n\r\nconst TableRows = props => {\r\n  const { verticalCellCount, horizontalCellCount } = props;\r\n  const rows = new Array(verticalCellCount).fill(null, 0, verticalCellCount - 1);\r\n  return (\r\n    <tbody>\r\n      {rows.map((r, key) => <tr key={key}>\r\n        <RowSells \r\n          count={horizontalCellCount} \r\n          coord={key}\r\n        />\r\n      </tr>)}\r\n    </tbody>\r\n  )\r\n}\r\n\r\nTableRows.propTypes = {\r\n  verticalCellCount: PropTypes.number.isRequired,\r\n  horizontalCellCount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default TableRows;","import Table from './Table';\r\n\r\nexport default Table;","import React from 'react';\r\nimport TableRows from './TableRows';\r\nimport PropTypes from 'prop-types';\r\nimport './Table.css';\r\n\r\nconst Table = props => (\r\n  <table className='table'>\r\n    <TableRows {...props} />\r\n  </table>\r\n);\r\n\r\nTable.propTypes = {\r\n  horizontalCellCount: PropTypes.number,\r\n  verticalCellCount: PropTypes.number\r\n};\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\nimport { Input, Select } from 'element-react';\r\nimport { connect } from 'react-redux';\r\nimport { dataTypes } from '../enums';\r\nimport { setCellValue } from '../actions/cellValues';\r\nimport { getCellByCoords } from '../utils/tableUtils';\r\nimport './style.css';\r\n\r\nconst getSelectOptions = (_enum) => (\r\n  _enum.map((item, idx) => (\r\n    <Select.Option \r\n      key={idx} \r\n      label={item.value}\r\n      value={item.key}\r\n    />\r\n  )\r\n))\r\n\r\nclass CellState extends Component {\r\n  state = {\r\n    dataTypesEnum: dataTypes,\r\n    inputValue: null,\r\n    cellDataType: null\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { focusedCell, cellValues } = this.props;\r\n    const { inputValue, cellDataType } = this.state;\r\n    if (focusedCell) {\r\n      const { xCoord, yCoord } = focusedCell;\r\n      const cell = getCellByCoords(cellValues, xCoord, yCoord);\r\n      if (cell) {\r\n        const { dataType } = cell;\r\n        let newState = {};\r\n        if (cell.formula) {\r\n          const { formula: { type, arguments: args } } = cell;\r\n          const coordsStr = args.map(arg => `${arg.xCoord}${arg.yCoord}`).join(', ');\r\n          const formulaStr = `${type}(${coordsStr})`;\r\n          if (this.state.inputValue !== formulaStr) {\r\n            newState = { \r\n              ...newState, \r\n              inputValue: formulaStr \r\n            }\r\n          }\r\n        } else {\r\n          const { value } = cell;\r\n          if (value !== inputValue) {\r\n            newState = { \r\n              ...newState, \r\n              inputValue: value \r\n            }\r\n          }\r\n        }\r\n\r\n        if (dataType !== cellDataType) {\r\n          newState = { \r\n            ...newState, \r\n            cellDataType: dataType \r\n          }\r\n        }\r\n\r\n        if (Object.keys(newState).length > 0) {\r\n          this.setState(newState);\r\n        }\r\n      } else {\r\n        if (this.state.inputValue || this.state.cellDataType)\r\n        this.setState({ \r\n          inputValue: null, \r\n          cellDataType: null \r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onSelectChange = value => {\r\n    const { inputValue } = this.state;\r\n    const { focusedCell: { xCoord, yCoord }, setCellValue } = this.props;\r\n    setCellValue({ xCoord, yCoord, dataType: value, value: inputValue })\r\n    this.setState({ cellDataType: value });\r\n  }\r\n\r\n  onInputChange = value => {\r\n    this.setState({ inputValue: value });\r\n  }\r\n\r\n  render() {\r\n    const { focusedCell } = this.props;\r\n    const { xCoord, yCoord } = focusedCell || {};\r\n    const coordsStr = focusedCell ? `[${xCoord}, ${yCoord}]` : null;\r\n    const { cellDataType, inputValue, dataTypesEnum } = this.state;\r\n    return <div className='cell-state'>\r\n      <div className='cell-coords'>\r\n        <span>{coordsStr}</span>\r\n      </div>\r\n      <div className='cell-value'>\r\n        <Input \r\n          value={inputValue}\r\n          disabled={!focusedCell}\r\n          onChange={this.onInputChange}\r\n        />\r\n      </div>\r\n      <div className='cell-data-type'></div>\r\n      <Select \r\n        placeholder='Data type' \r\n        disabled={!focusedCell}\r\n        value={cellDataType}\r\n        onChange={this.onSelectChange}\r\n      >\r\n        {getSelectOptions(dataTypesEnum)}\r\n      </Select>\r\n    </div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const { focusedCell, cellValues } = state.toJS();\r\n  return { focusedCell, cellValues };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setCellValue: payload => dispatch(setCellValue(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CellState);","import CellState from './CellState';\r\n\r\nexport default CellState;","import React from 'react';\r\nimport Alert from 'react-s-alert';\r\n\r\nimport 'react-s-alert/dist/s-alert-default.css';\r\nimport 'react-s-alert/dist/s-alert-css-effects/slide.css';\r\n\r\nconst SAlert = props => (\r\n  <Alert />\r\n)\r\n\r\nexport default SAlert;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Table from './Table';\r\nimport CellState from './CellState';\r\nimport SAlert from './SAlert';\r\nimport './App.css';\r\nimport 'element-theme-default';\r\n\r\nconst App = props => (\r\n    <div className=\"App\">\r\n      <CellState />\r\n      <Table \r\n        horizontalCellCount={10}\r\n        verticalCellCount={10}\r\n      />\r\n      <SAlert />\r\n    </div>\r\n)\r\n\r\nexport default connect()(App);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  (<Provider store={configureStore()}>\r\n    <App />\r\n  </Provider>), \r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}